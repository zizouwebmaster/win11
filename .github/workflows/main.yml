name: CI

on: [push, workflow_dispatch]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - name: Download
      run: |
        Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        if (-not (Test-Path ngrok.zip)) {
          Write-Error "Failed to download ngrok.zip"
          exit 1
        }
    - name: Extract
      run: |
        Expand-Archive ngrok.zip
        if (-not (Test-Path ngrok)) {
          Write-Error "Failed to extract ngrok.zip"
          exit 1
        }
    - name: Auth
      run: |
        .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    - name: Enable TS
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
        if ((Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server').fDenyTSConnections -ne 0) {
          Write-Error "Failed to enable Terminal Server"
          exit 1
        }
    - run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
    - run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
    - run: |
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
        if (-not (Get-LocalUser -Name "runneradmin")) {
          Write-Error "Failed to create user 'runneradmin'"
          exit 1
        }
    - name: Create Tunnel
      run: |
        .\ngrok\ngrok.exe tcp 3389
        if (-not (Get-Process -Name "ngrok")) {
          Write-Error "Failed to create ngrok tunnel"
          exit 1
        }
